{"version":3,"file":"static/js/534.8c1201cc.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/Contacts.styled.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/App.styled.jsx","redux/contacts/selectors.js","redux/filter/selectors.js","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-bottom: 40px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  background: #e2e2e2;\n  padding: 0 10px 0 10px;\n  outline: none;\n  border: 1px solid #e2e2e2;\n  border-radius: 5px;\n  height: 30px;\n  color: #201717;\n  width: 400px;\n  margin-top: 5px;\n  &:focus {\n    border-color: #76b5be;\n  }\n`;\n\nexport const Title = styled.span`\n  font-weight: 600;\n  color: #201717;\n`;\n\nexport const Button = styled.button`\n  outline: none;\n  border: 1px solid #d3d3d3;\n  border-radius: 5px;\n  padding: 10px 25px;\n  color: #201717;\n  transition: all 0.3s ease;\n  background: linear-gradient(10deg, rgb(126 185 191), rgb(255, 255, 255) 50%);\n  &:hover {\n    background: linear-gradient(45deg, #79bfc9, #274b54);\n    color: #79bfc9;\n  }\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { Form, Label, Input, Title, Button } from './ContactForm.styled';\nimport { addContactsThunk } from 'redux/contacts/thunk';\nimport { useDispatch } from 'react-redux';\n\nconst ContactForm = ({ checkDublicateName }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  // Відповідає за оновлення стану\n  const onHandleChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const onSubmitForm = event => {\n    event.preventDefault();\n    const newContact = {\n      name,\n      number: number,\n    };\n    checkDublicateName({ name })\n      ? alert(`This name \"${name}\" is already exist!`)\n      : dispatch(addContactsThunk(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <Form action=\"\" onSubmit={onSubmitForm}>\n        <Title>Name</Title>\n        <Label htmlFor={nameInputId}>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={onHandleChange}\n            id={nameInputId}\n          />\n        </Label>\n        <Title>Number</Title>\n        <Label htmlFor={numberInputId}>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={onHandleChange}\n            id={numberInputId}\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  checkDublicateName: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n  /* display: flex;\n  flex-direction: column;\n  align-items: center; */\n  margin: 20px 0px 0px 0px;\n`;\n\nexport const Item = styled.li`\n  width: 400px;\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  padding: 10px 20px;\n  max-width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  position: relative;\n  transition: transform linear 250ms;\n  background: linear-gradient(10deg, rgb(126 185 191), rgb(255, 255, 255) 50%);\n  box-shadow: rgb(223 234 235) 0rem 1.25rem 2.625rem 0.375rem;\n  border-radius: 5px;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const Button = styled.button`\n  background: inherit;\n  outline: none;\n  border: 1px solid #d3d3d3;\n  border-radius: 5px;\n  padding: 5px 15px;\n  color: inherit;\n  transition: all 0.3s ease;\n  &:hover {\n    background: linear-gradient(45deg, #79bfc9, #274b54);\n    color: #79bfc9;\n    background-size: cover;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Item, Button, Div } from './Contacts.styled';\nimport { deleteContactsThunk } from 'redux/contacts/thunk';\nimport { useDispatch } from 'react-redux';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Div>\n      <Item key={id}>\n        {name}: {number}\n        <Button\n          onClick={() => dispatch(deleteContactsThunk(id))}\n          type=\"button\"\n          id={id}\n        >\n          Delete\n        </Button>\n      </Item>\n    </Div>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem';\n\nconst ContactList = ({ filteredContacts }) => {\n  return (\n    <>\n      {filteredContacts.map(({ id, name, number }) => {\n        return <ContactItem key={id} id={id} name={name} number={number} />;\n      })}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      phone: PropTypes.string,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  font-size: 18px;\n  font-weight: 500;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Span = styled.span`\n  color: #76b5be;\n`;\n\nexport const Input = styled.input`\n  background: #e2e2e2;\n  margin-top: 15px;\n  padding: 0px 10px;\n  outline: none;\n  border: 1px solid #e2e2e2;\n  border-radius: 5px;\n  width: 400px;\n  height: 30px;\n  &:focus {\n    border-color: #76b5be;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Label, Span, Input } from './Filter.styled';\nimport { filterUpdate } from '../../redux/filter/filterSlice';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = ({ filterValue }) => {\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(filterUpdate(event.target.value));\n  };\n\n  return (\n    <Label htmlFor=\"\">\n      <Span>Find contacts by name</Span>\n      <Input value={filterValue} onChange={handleChange} type=\"text\"></Input>\n    </Label>\n  );\n};\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  padding: 0px 15px 100px 15px;\n  width: 500px;\n`;\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  text-transform: uppercase;\n  font-weight: 800px;\n  letter-spacing: 2px;\n  color: #201717;\n  padding-top: 50px;\n  padding-bottom: 40px;\n`;\n\nexport const Subtitle = styled.h2`\n  font-size: 26px;\n  text-transform: uppercase;\n  font-weight: 700px;\n  color: #201717;\n  margin-bottom: 30px;\n`;\n","export const selectContacts = state => state.contacts.items;\n// 1 раз змінна contacts ми звертаємось до contacts які знаходяться в rootReducer,\n// 2 раз до items які знаходяться в contactSlice в initialState.\n","export const selectFilter = state => state.filter.filter;\n// 1 раз змінна filter ми звертаємось до filter які знаходяться в rootReducer в стейті,\n// 2 раз до filter які знаходяться в contactFilter в initialState.\n","import ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { Container, Title, Subtitle } from '../components/App.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useEffect } from 'react';\nimport { fetchContactsThunk } from 'redux/contacts/thunk';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  //  Перевіряє на дубляж контактів який\n  //  вводить користувач порівнюючи новий контакт із тим який вже є\n  const checkDublicateName = ({ name }) => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  // Функція filteredContacts забезпечує фільтрацію списку контактів\n  //  на основі введеного користувачем рядка фільтру.\n  const filteredContacts = () => {\n    const normalize = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalize);\n    });\n  };\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm checkDublicateName={checkDublicateName} />\n      <Subtitle>Contacts</Subtitle>\n      <Filter filterValue={filter} />\n      <ContactList filteredContacts={filteredContacts()} />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Form","styled","Label","Input","Title","Button","checkDublicateName","useState","name","setName","number","setNumber","dispatch","useDispatch","nameInputId","nanoid","numberInputId","onHandleChange","event","target","value","reset","action","onSubmit","preventDefault","newContact","alert","addContactsThunk","htmlFor","type","pattern","title","required","onChange","id","Div","Item","onClick","deleteContactsThunk","filteredContacts","map","Span","filterValue","filterUpdate","Container","Subtitle","selectContacts","state","contacts","items","selectFilter","filter","useSelector","useEffect","fetchContactsThunk","some","contact","toLowerCase","normalize","includes"],"sourceRoot":""}